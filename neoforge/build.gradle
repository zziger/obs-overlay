plugins {
    id 'com.github.johnrengelman.shadow'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    modImplementation "me.shedaniel.cloth:cloth-config-neoforge:$rootProject.cloth_config_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}


unifiedPublishing {
    project {
        displayName = "[NeoForge $rootProject.supported_version] v$rootProject.mod_version"
        releaseType = "release"
        gameVersions = ["1.20.5", "1.20.6"]
        gameLoaders = ["neoforge"]

        mainPublication remapJar

        relations {
            depends {
                curseforge = "cloth-config"
                modrinth = "cloth-config"
            }
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
        }

        if (rootProject.hasProperty("curse_api_key") || System.getenv("CURSE_API_KEY") != null) {
            curseforge {
                token = rootProject.hasProperty("curse_api_key") ? rootProject.property("curse_api_key") : System.getenv("CURSE_API_KEY")
                id = rootProject.curseforge_id
                gameVersions.addAll "Java 21"
            }
        }

        if (rootProject.hasProperty("modrinth_key") || System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = rootProject.hasProperty("modrinth_key") ? rootProject.property("modrinth_key") : System.getenv("MODRINTH_TOKEN")
                id = rootProject.modrinth_id
                version = "$rootProject.mod_version+$rootProject.minecraft_version-$project.name"
            }
        }
    }
}